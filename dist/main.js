(()=>{"use strict";var e={426:(e,t,o)=>{o.d(t,{Z:()=>a});var n=o(15),r=o.n(n),i=o(645),d=o.n(i)()(r());d.push([e.id,'#sidebar {\n    height: 100%; /* Full-height: remove this if you want "auto" height */\n    width: 160px; /* Set the width of the sidebar */\n    position: fixed; /* Fixed Sidebar (stay in place on scroll) */\n    z-index: 1; /* Stay on top */\n    top: 0; /* Stay at the top */\n    left: 0;\n    background-color: rgb(196, 196, 196); /* Black */\n    overflow-x: hidden; /* Disable horizontal scroll */\n    padding-top: 20px;\n  }\n\n#sidebar a {\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #303030;\n    display: block;\n  }\n\n#sidebar a:hover {\n    color: #ffffff;\n  }\n\n#content {\n    margin-left: 160px; /* Same as the width of the sidebar */\n    padding: 0px 10px;\n  }\n\n\n/* On smaller screens, where height is less than 450px, change the style of the sidebar (less padding and a smaller font size) */\n@media screen and (max-height: 450px) {\n    #sidebar {padding-top: 15px;}\n    #sidebar a {font-size: 18px;}\n  }\n\n.to-do {\n    display: flex;\n    border: solid #888 1px;    \n}\n\n.to-do:hover {\n    background-color:#d9d9d9;\n}\n\n\n.to-do-checkbox {\n    flex: 0;\n    margin: 2px;\n}\n\n.to-do p {\n    right: 0;\n    margin: 0px;\n}\n\n.to-do .due-date {\n  display: inline-block;\n  position: absolute;\n  right: 22px;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  padding-top: 100px; /* Location of the box */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal #add-project-form,  #add-to-do-form, #edit-to-do-form {\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY,EAAE,uDAAuD;IACrE,YAAY,EAAE,iCAAiC;IAC/C,eAAe,EAAE,4CAA4C;IAC7D,UAAU,EAAE,gBAAgB;IAC5B,MAAM,EAAE,oBAAoB;IAC5B,OAAO;IACP,oCAAoC,EAAE,UAAU;IAChD,kBAAkB,EAAE,8BAA8B;IAClD,iBAAiB;EACnB;;AAEF;IACI,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,cAAc;EAChB;;AAEF;IACI,cAAc;EAChB;;AAEF;IACI,kBAAkB,EAAE,qCAAqC;IACzD,iBAAiB;EACnB;;;AAGF,gIAAgI;AAChI;IACI,UAAU,iBAAiB,CAAC;IAC5B,YAAY,eAAe,CAAC;EAC9B;;AAEF;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B;;;AAGA;IACI,OAAO;IACP,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,WAAW;AACf;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,aAAa,EAAE,sBAAsB;EACrC,eAAe,EAAE,kBAAkB;EACnC,UAAU,EAAE,eAAe;EAC3B,kBAAkB,EAAE,wBAAwB;EAC5C,OAAO;EACP,MAAM;EACN,WAAW,EAAE,eAAe;EAC5B,YAAY,EAAE,gBAAgB;EAC9B,cAAc,EAAE,4BAA4B;EAC5C,4BAA4B,EAAE,mBAAmB;EACjD,iCAAiC,EAAE,qBAAqB;AAC1D;;AAEA;EACE,yBAAyB;EACzB,gBAAgB,EAAE,kCAAkC;EACpD,aAAa;EACb,sBAAsB;EACtB,UAAU,EAAE,oDAAoD;AAClE",sourcesContent:['#sidebar {\n    height: 100%; /* Full-height: remove this if you want "auto" height */\n    width: 160px; /* Set the width of the sidebar */\n    position: fixed; /* Fixed Sidebar (stay in place on scroll) */\n    z-index: 1; /* Stay on top */\n    top: 0; /* Stay at the top */\n    left: 0;\n    background-color: rgb(196, 196, 196); /* Black */\n    overflow-x: hidden; /* Disable horizontal scroll */\n    padding-top: 20px;\n  }\n\n#sidebar a {\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #303030;\n    display: block;\n  }\n\n#sidebar a:hover {\n    color: #ffffff;\n  }\n\n#content {\n    margin-left: 160px; /* Same as the width of the sidebar */\n    padding: 0px 10px;\n  }\n\n\n/* On smaller screens, where height is less than 450px, change the style of the sidebar (less padding and a smaller font size) */\n@media screen and (max-height: 450px) {\n    #sidebar {padding-top: 15px;}\n    #sidebar a {font-size: 18px;}\n  }\n\n.to-do {\n    display: flex;\n    border: solid #888 1px;    \n}\n\n.to-do:hover {\n    background-color:#d9d9d9;\n}\n\n\n.to-do-checkbox {\n    flex: 0;\n    margin: 2px;\n}\n\n.to-do p {\n    right: 0;\n    margin: 0px;\n}\n\n.to-do .due-date {\n  display: inline-block;\n  position: absolute;\n  right: 22px;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  padding-top: 100px; /* Location of the box */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal #add-project-form,  #add-to-do-form, #edit-to-do-form {\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}'],sourceRoot:""}]);const a=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o=e(t);return t[2]?"@media ".concat(t[2]," {").concat(o,"}"):o})).join("")},t.i=function(e,o,n){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(n)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(r[d]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);n&&r[l[0]]||(o&&(l[2]?l[2]="".concat(o," and ").concat(l[2]):l[2]=o),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var o=0,n=new Array(t);o<t;o++)n[o]=e[o];return n}e.exports=function(e){var o,n,r=(n=4,function(e){if(Array.isArray(e))return e}(o=e)||function(e,t){var o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var n,r,i=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(n=o.next()).done)&&(i.push(n.value),!t||i.length!==t);d=!0);}catch(e){a=!0,r=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw r}}return i}}(o,n)||function(e,o){if(e){if("string"==typeof e)return t(e,o);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,o):void 0}}(o,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],d=r[3];if(!d)return i;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(d)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(l," */"),c=d.sources.map((function(e){return"/*# sourceURL=".concat(d.sourceRoot||"").concat(e," */")}));return[i].concat(c).concat([s]).join("\n")}return[i].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var i={},d=[],a=0;a<e.length;a++){var l=e[a],s=n.base?l[0]+n.base:l[0],c=i[s]||0,u="".concat(s," ").concat(c);i[s]=c+1;var p=o(u),m={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(t[p].references++,t[p].updater(m)):t.push({identifier:u,updater:r(m,n),references:1}),d.push(u)}return d}function r(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o.update(e=t)}else o.remove()}}e.exports=function(e,r){var i=n(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var a=o(i[d]);t[a].references--}for(var l=n(e,r),s=0;s<i.length;s++){var c=o(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n=o.css,r=o.media,i=o.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=o(379),t=o.n(e),n=o(795),r=o.n(n),i=o(569),d=o.n(i),a=o(565),l=o.n(a),s=o(216),c=o.n(s),u=o(589),p=o.n(u),m=o(426),A={};A.styleTagTransform=p(),A.setAttributes=l(),A.insert=d().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=c(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;const f=()=>{const e=document.querySelector("div#sidebar"),t=document.createElement("button");t.setAttribute("id","add-project-button"),t.textContent="Add Project",e.appendChild(t)},b=()=>{const e=document.querySelector("div#content"),t=document.createElement("button");t.setAttribute("id","add-to-do-button"),t.textContent="Add To-Do",e.appendChild(t)},h=()=>{const e=document.createElement("div"),t=document.querySelector("div#sidebar");e.setAttribute("id","project-list"),e.textContent="Projects",t.appendChild(e)},C=e=>{const t=document.createElement("a"),o=document.querySelector("div#project-list");return t.classList.add("project"),t.setAttribute("href","#"),t.textContent=e,o.appendChild(t),t},g=()=>{const e=document.createElement("div"),t=document.createElement("form"),o=document.querySelector("div#sidebar"),n=document.createElement("label"),r=document.createElement("input"),i=document.createElement("button"),d=document.createElement("button");e.classList.add("modal"),t.setAttribute("id","add-project-form"),t.setAttribute("onsubmit","return false"),n.classList.add("form-element"),n.setAttribute("for","title"),n.textContent="Project Name",r.classList.add("form-element"),r.setAttribute("type","text"),r.setAttribute("name","title"),r.required=!0,i.classList.add("form-element"),i.setAttribute("type","submit"),i.setAttribute("id","submit-project"),i.textContent="Add Project",d.classList.add("form-element"),d.setAttribute("type","button"),d.setAttribute("id","close-project-form"),d.textContent="Cancel",t.appendChild(n),t.appendChild(r),t.appendChild(i),t.appendChild(d),e.appendChild(t),o.appendChild(e)},y=e=>{const t=document.querySelector("div#content");console.log(t),console.log(e),t.removeChild(e)},E=e=>{const t=document.querySelector("div#sidebar");console.log(e),t.removeChild(e)},v=()=>{const e=document.createElement("div"),t=document.createElement("form"),o=document.querySelector("div#content"),n=document.createElement("label"),r=document.createElement("input"),i=document.createElement("label"),d=document.createElement("input"),a=document.createElement("label"),l=document.createElement("input"),s=document.createElement("label"),c=document.createElement("input"),u=document.createElement("label"),p=document.createElement("input"),m=document.createElement("label"),A=document.createElement("input"),f=document.createElement("label"),b=document.createElement("input"),h=document.createElement("label"),C=document.createElement("input"),g=document.createElement("button"),y=document.createElement("button");e.classList.add("modal"),t.setAttribute("id","add-to-do-form"),t.setAttribute("onsubmit","return false"),n.classList.add("form-element"),n.setAttribute("for","title"),n.textContent="Title",r.classList.add("form-element"),r.setAttribute("type","text"),r.setAttribute("name","title"),r.required=!0,i.classList.add("form-element"),i.setAttribute("for","description"),i.textContent="Description",d.classList.add("form-element"),d.setAttribute("type","text"),d.setAttribute("name","description"),a.classList.add("form-element"),a.setAttribute("for","due-date"),a.textContent="Due Date",l.classList.add("form-element"),l.setAttribute("type","date"),l.setAttribute("name","due-date"),s.classList.add("form-element"),s.setAttribute("for","priority"),s.textContent="No Priority",c.classList.add("form-element"),c.setAttribute("type","radio"),c.setAttribute("name","priority"),c.setAttribute("value",""),u.classList.add("form-element"),u.setAttribute("for","priority"),u.textContent="Low Priority",p.classList.add("form-element"),p.setAttribute("type","radio"),p.setAttribute("name","priority"),p.setAttribute("value","low-priority"),m.classList.add("form-element"),m.setAttribute("for","priority"),m.textContent="Medium Priority",A.classList.add("form-element"),A.setAttribute("type","radio"),A.setAttribute("name","priority"),A.setAttribute("value","medium-priority"),f.classList.add("form-element"),f.setAttribute("for","priority"),f.textContent="High Priority",b.classList.add("form-element"),b.setAttribute("type","radio"),b.setAttribute("name","priority"),b.setAttribute("value","high-priority"),h.classList.add("form-element"),h.setAttribute("for","notes"),h.textContent="Notes",C.classList.add("form-element"),C.setAttribute("type","text"),C.setAttribute("name","notes"),g.classList.add("form-element"),g.setAttribute("type","submit"),g.setAttribute("id","submit-to-do"),g.textContent="Add To-Do",y.classList.add("form-element"),y.setAttribute("type","button"),y.setAttribute("id","close-to-do-form"),y.textContent="Cancel",t.appendChild(n),t.appendChild(r),t.appendChild(i),t.appendChild(d),t.appendChild(a),t.appendChild(l),t.appendChild(s),t.appendChild(c),t.appendChild(u),t.appendChild(p),t.appendChild(m),t.appendChild(A),t.appendChild(f),t.appendChild(b),t.appendChild(h),t.appendChild(C),t.appendChild(g),t.appendChild(y),e.appendChild(t),o.appendChild(e)},x=e=>{void 0!==e[0]&&console.log(e[0].getTitle());const t=document.createElement("div"),o=document.querySelector("div#content");t.classList.add("to-do-list"),t.textContent="To-Dos";const n=[];return o.appendChild(t),e.forEach((e=>{const t=e.getTitle(),o=(e.getDescription(),e.getDueDate()),r=(e.getPriority(),e.getNotes(),((e,t)=>{const o=document.querySelector("div.to-do-list"),n=document.createElement("span"),r=document.createElement("p"),i=document.createElement("p"),d=document.createElement("label"),a=document.createElement("input");return d.classList.add("to-do-checkbox"),d.setAttribute("for","checkbox"),a.classList.add("to-do-checkbox"),a.setAttribute("type","checkbox"),a.setAttribute("name","checkbox"),n.classList.add("to-do"),r.textContent=e,r.classList.add("to-do-title"),i.classList.add("due-date"),""!==t&&(i.textContent="Due: "+t),n.appendChild(d),n.appendChild(a),n.appendChild(r),n.appendChild(i),o.appendChild(n),n})(t,o));n.push(r)})),n},L=()=>{const e=document.querySelector("div#content");for(;e.firstChild;)e.removeChild(e.firstChild)},B=e=>{const t=document.querySelector("div#content"),o=document.createElement("div");o.setAttribute("id","edit-to-do-modal"),o.classList.add("modal");const n=document.createElement("form");n.classList.add("form"),n.setAttribute("id","edit-to-do-form"),n.setAttribute("onsubmit","return false"),console.log(e);const r=e.getTitle(),i=e.getDescription(),d=e.getDueDate(),a=e.getPriority(),l=e.getNotes(),s=document.createElement("label"),c=document.createElement("input"),u=document.createElement("label"),p=document.createElement("input"),m=document.createElement("label"),A=document.createElement("input"),f=document.createElement("label"),b=document.createElement("input"),h=document.createElement("label"),C=document.createElement("input"),g=document.createElement("label"),y=document.createElement("input"),E=document.createElement("label"),v=document.createElement("input"),x=document.createElement("label"),L=document.createElement("input"),B=document.createElement("button"),D=document.createElement("button");switch(s.classList.add("form-element"),s.setAttribute("for","title"),s.textContent="Title",c.classList.add("form-element"),c.setAttribute("type","text"),c.setAttribute("name","title"),c.setAttribute("value",r),u.classList.add("form-element"),u.setAttribute("for","description"),u.textContent="Description",p.classList.add("form-element"),p.setAttribute("type","text"),p.setAttribute("name","description"),p.setAttribute("value",i),m.classList.add("form-element"),m.setAttribute("for","due-date"),m.textContent="Due Date",A.classList.add("form-element"),A.setAttribute("type","date"),A.setAttribute("name","due-date"),A.setAttribute("value",d),f.classList.add("form-element"),f.setAttribute("for","priority"),f.textContent="No Priority",b.classList.add("form-element"),b.setAttribute("type","radio"),b.setAttribute("name","priority"),b.setAttribute("value",""),h.classList.add("form-element"),h.setAttribute("for","priority"),h.textContent="Low Priority",C.classList.add("form-element"),C.setAttribute("type","radio"),C.setAttribute("name","priority"),C.setAttribute("value","low-priority"),g.classList.add("form-element"),g.setAttribute("for","priority"),g.textContent="Medium Priority",y.classList.add("form-element"),y.setAttribute("type","radio"),y.setAttribute("name","priority"),y.setAttribute("value","medium-priority"),E.classList.add("form-element"),E.setAttribute("for","priority"),E.textContent="High Priority",v.classList.add("form-element"),v.setAttribute("type","radio"),v.setAttribute("name","priority"),v.setAttribute("value","high-priority"),a){case"":b.checked=!0;break;case"low-priority":C.checked=!0;break;case"medium-priority":y.checked=!0;break;case"high-priority":v.checked=!0}x.classList.add("form-element"),x.setAttribute("for","notes"),x.textContent="Notes",L.classList.add("form-element"),L.setAttribute("type","text"),L.setAttribute("name","notes"),L.setAttribute("value",l),B.classList.add("form-element"),B.setAttribute("type","submit"),B.setAttribute("id","edit-to-do"),B.textContent="Edit To-Do",D.classList.add("form-element"),D.setAttribute("type","button"),D.setAttribute("id","close-edit-to-do"),D.textContent="Cancel",n.appendChild(s),n.appendChild(c),n.appendChild(u),n.appendChild(p),n.appendChild(m),n.appendChild(A),n.appendChild(f),n.appendChild(b),n.appendChild(h),n.appendChild(C),n.appendChild(g),n.appendChild(y),n.appendChild(E),n.appendChild(v),n.appendChild(x),n.appendChild(L),n.appendChild(B),n.appendChild(D),o.appendChild(n),t.appendChild(o)},D=e=>{document.querySelector("div.to-do-list").removeChild(e)},S=(()=>{const e=[];return{addProject:t=>{e.push(t)},getProjectList:()=>e}})(),k=(e,t)=>{t.getToDoList().push(e),console.log(t.getToDoList())},I=(e,t,o,n,r,i)=>{e.title=t,e.description=o,e.dueDate=n,e.priority=r,e.newNotes=i},j=(()=>{const e=[];return{saveProjects:()=>{for(localStorage.clear();e.length>0;)e.pop();(()=>{const t=S.getProjectList();console.log(t),t.forEach((t=>{console.log(t);const o=t.getTitle(),n=t.getToDoList(),r=[];console.log(n),n.forEach((e=>{console.log("hello");const t=e.getTitle(),o=e.getDescription(),n=e.getDueDate(),i=e.getPriority(),d=e.getNotes();console.log(t),r.push({toDoTitle:t,toDoDescription:o,toDoDueDate:n,toDoPriority:i,toDoNotes:d})})),e.push({title:o,toDoListConverted:r}),console.log(e)}))})(),localStorage.setItem("Projects",JSON.stringify(e)),console.log(e),console.log(JSON.stringify(e)),console.log(JSON.parse(localStorage.getItem("Projects")))},loadProjects:()=>{let e=[];e=JSON.parse(localStorage.getItem("Projects")),console.log(e),null!==e&&e.forEach(((e,t)=>{const o=e.title,n=e.toDoListConverted;P.createProject(o),console.log(n),Array.isArray(n)&&"undefined"!==n&&0!==n.length&&(console.log(n.length),console.log(n),n.forEach((e=>{const o=e.toDoTitle,n=e.toDoDescription,r=e.toDoDueDate,i=e.toDoPriority,d=e.toDoNotes,a=S.getProjectList()[t];P.createToDo(a,o,n,r,i,d)})))}))}}})(),P=(()=>{const e=new Map,t=new Map,o=e=>{const t=(e=>{let t=[];return{getTitle:()=>e,getToDoList:()=>t}})(e);S.addProject(t);const o=C(e);l(o,t),a()},n=(e,t,o,n,r,i)=>{const d=((e,t,o,n,r)=>({getTitle:()=>e,getDescription:()=>t,getDueDate:()=>o,getPriority:()=>n,getNotes:()=>r,set title(t){e=t},set description(e){t=e},set dueDate(e){o=e},set priority(e){n=e},set priority(e){r=e}}))(t,o,n,r,i);k(d,e)},r=e=>{const t=e.getToDoList();L(),b();const o=x(t);void 0!==t[0]&&console.log(t[0].getTitle()),s(o,t),(e=>{document.querySelector("button#add-to-do-button").addEventListener("click",(()=>{null===document.querySelector("form")&&(v(),document.querySelector("div.modal").style.display="block",(e=>{const t=document.querySelector("div#content>div.modal"),o=document.querySelector("form#add-to-do-form"),i=document.querySelector("button#close-to-do-form");o.addEventListener("submit",(()=>{const i=o.elements.title.value,d=o.elements.description.value,a=o.elements["due-date"].value,l=o.elements.priority.value,s=o.elements.notes.value;n(e,i,d,a,l,s),y(t),r(e),j.saveProjects()})),i.addEventListener("click",(()=>{y(t)}))})(e))}))})(e),d(e),i(e)},i=e=>{document.querySelectorAll("span.to-do").forEach(((o,n)=>{o.addEventListener("click",(function(o){if("checkbox"!==o.target.getAttribute("type")){const r=t.get(o.currentTarget);console.log(o),null===document.querySelector("div#edit-to-do-modal")&&(B(r),document.querySelector("div#edit-to-do-modal").style.display="block",c(r,n,e),console.log("hello"))}}))}))},d=e=>{document.querySelectorAll("div.to-do-list>span.to-do>input.to-do-checkbox").forEach(((t,o)=>{u(t,o,e)}))},a=()=>{document.querySelectorAll("a.project").forEach((t=>{t.addEventListener("click",(function(t){const o=e.get(t.target);console.log(t.target),r(o)}))}))},l=(t,o)=>{e.set(t,o)},s=(e,o)=>{t.clear(),console.log(e),console.log(t),e.forEach(((e,n)=>{const r=o[n];t.set(e,r)}))},c=(e,t,o)=>{const n=document.querySelector("div#edit-to-do-modal"),i=document.querySelector("form#edit-to-do-form"),d=document.querySelector("form#edit-to-do-form>button#close-edit-to-do");i.addEventListener("submit",(()=>{const d=i.elements.title.value,a=i.elements.description.value,l=i.elements["due-date"].value,s=i.elements.priority.value,c=i.elements.notes.value;console.log(d),I(e,d,a,l,s,c),toDoList=o.getToDoList(),console.log(toDoList[t].getTitle()),toDoList[t]=e,y(n),r(o),j.saveProjects()})),d.addEventListener("click",(()=>{y(n)}))},u=(e,t,o)=>{e.addEventListener("change",(e=>{e.preventDefault(),e.stopPropagation();const n=e.currentTarget.parentElement;console.log(e),o.getToDoList().splice(t,1),D(n),j.saveProjects()}))};return{observeProjectButton:()=>{document.querySelector("button#add-project-button").addEventListener("click",(()=>{null===document.querySelector("form")&&(g(),document.querySelector("div.modal").style.display="block",(()=>{const e=document.querySelector("div#sidebar>div.modal");console.log(e);const t=document.querySelector("form#add-project-form"),n=document.querySelector("button#close-project-form");t.addEventListener("submit",(()=>{const n=t.elements.title.value;o(n),E(e),j.saveProjects()})),n.addEventListener("click",(()=>{E(e)}))})())}))},createProject:o,createToDo:n}})(),w=()=>{P.createProject("Default Project")};(()=>{f(),h(),P.observeProjectButton()})(),j.loadProjects(),console.log(localStorage.getItem("projects")),null===localStorage.getItem("Projects")&&w()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,