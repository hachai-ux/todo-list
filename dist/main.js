(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),d=n.n(i)()(r());d.push([e.id,'#sidebar {\n    height: 100%; /* Full-height: remove this if you want "auto" height */\n    width: 160px; /* Set the width of the sidebar */\n    position: fixed; /* Fixed Sidebar (stay in place on scroll) */\n    z-index: 1; /* Stay on top */\n    top: 0; /* Stay at the top */\n    left: 0;\n    background-color: rgb(196, 196, 196); /* Black */\n    overflow-x: hidden; /* Disable horizontal scroll */\n    padding-top: 20px;\n  }\n\n#sidebar a {\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #303030;\n    display: block;\n  }\n\n#sidebar a:hover {\n    color: #ffffff;\n  }\n\n#content {\n    margin-left: 160px; /* Same as the width of the sidebar */\n    padding: 0px 10px;\n  }\n\n\n/* On smaller screens, where height is less than 450px, change the style of the sidebar (less padding and a smaller font size) */\n@media screen and (max-height: 450px) {\n    #sidebar {padding-top: 15px;}\n    #sidebar a {font-size: 18px;}\n  }\n\n.to-do {\n    display: flex;\n    border: solid #888 1px;    \n}\n\n.to-do:hover {\n    background-color:#d9d9d9;\n}\n\n\n.to-do-checkbox {\n    flex: 0;\n    margin: 2px;\n}\n\n.to-do p {\n    right: 0;\n    margin: 0px;\n}\n\n.to-do .due-date {\n  display: inline-block;\n  position: absolute;\n  right: 22px;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  padding-top: 100px; /* Location of the box */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal #add-project-form,  #add-to-do-form, #edit-to-do-form {\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY,EAAE,uDAAuD;IACrE,YAAY,EAAE,iCAAiC;IAC/C,eAAe,EAAE,4CAA4C;IAC7D,UAAU,EAAE,gBAAgB;IAC5B,MAAM,EAAE,oBAAoB;IAC5B,OAAO;IACP,oCAAoC,EAAE,UAAU;IAChD,kBAAkB,EAAE,8BAA8B;IAClD,iBAAiB;EACnB;;AAEF;IACI,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;IACf,cAAc;IACd,cAAc;EAChB;;AAEF;IACI,cAAc;EAChB;;AAEF;IACI,kBAAkB,EAAE,qCAAqC;IACzD,iBAAiB;EACnB;;;AAGF,gIAAgI;AAChI;IACI,UAAU,iBAAiB,CAAC;IAC5B,YAAY,eAAe,CAAC;EAC9B;;AAEF;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B;;;AAGA;IACI,OAAO;IACP,WAAW;AACf;;AAEA;IACI,QAAQ;IACR,WAAW;AACf;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,aAAa,EAAE,sBAAsB;EACrC,eAAe,EAAE,kBAAkB;EACnC,UAAU,EAAE,eAAe;EAC3B,kBAAkB,EAAE,wBAAwB;EAC5C,OAAO;EACP,MAAM;EACN,WAAW,EAAE,eAAe;EAC5B,YAAY,EAAE,gBAAgB;EAC9B,cAAc,EAAE,4BAA4B;EAC5C,4BAA4B,EAAE,mBAAmB;EACjD,iCAAiC,EAAE,qBAAqB;AAC1D;;AAEA;EACE,yBAAyB;EACzB,gBAAgB,EAAE,kCAAkC;EACpD,aAAa;EACb,sBAAsB;EACtB,UAAU,EAAE,oDAAoD;AAClE",sourcesContent:['#sidebar {\n    height: 100%; /* Full-height: remove this if you want "auto" height */\n    width: 160px; /* Set the width of the sidebar */\n    position: fixed; /* Fixed Sidebar (stay in place on scroll) */\n    z-index: 1; /* Stay on top */\n    top: 0; /* Stay at the top */\n    left: 0;\n    background-color: rgb(196, 196, 196); /* Black */\n    overflow-x: hidden; /* Disable horizontal scroll */\n    padding-top: 20px;\n  }\n\n#sidebar a {\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #303030;\n    display: block;\n  }\n\n#sidebar a:hover {\n    color: #ffffff;\n  }\n\n#content {\n    margin-left: 160px; /* Same as the width of the sidebar */\n    padding: 0px 10px;\n  }\n\n\n/* On smaller screens, where height is less than 450px, change the style of the sidebar (less padding and a smaller font size) */\n@media screen and (max-height: 450px) {\n    #sidebar {padding-top: 15px;}\n    #sidebar a {font-size: 18px;}\n  }\n\n.to-do {\n    display: flex;\n    border: solid #888 1px;    \n}\n\n.to-do:hover {\n    background-color:#d9d9d9;\n}\n\n\n.to-do-checkbox {\n    flex: 0;\n    margin: 2px;\n}\n\n.to-do p {\n    right: 0;\n    margin: 0px;\n}\n\n.to-do .due-date {\n  display: inline-block;\n  position: absolute;\n  right: 22px;\n}\n\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed; /* Stay in place */\n  z-index: 1; /* Sit on top */\n  padding-top: 100px; /* Location of the box */\n  left: 0;\n  top: 0;\n  width: 100%; /* Full width */\n  height: 100%; /* Full height */\n  overflow: auto; /* Enable scroll if needed */\n  background-color: rgb(0,0,0); /* Fallback color */\n  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.modal #add-project-form,  #add-to-do-form, #edit-to-do-form {\n  background-color: #fefefe;\n  margin: 15% auto; /* 15% from the top and centered */\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%; /* Could be more or less, depending on screen size */\n}'],sourceRoot:""}]);const a=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(r[d]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,r,i=[],d=!0,a=!1;try{for(n=n.call(e);!(d=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);d=!0);}catch(e){a=!0,r=e}finally{try{d||null==n.return||n.return()}finally{if(a)throw r}}return i}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],d=r[3];if(!d)return i;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(d)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(l," */"),c=d.sources.map((function(e){return"/*# sourceURL=".concat(d.sourceRoot||"").concat(e," */")}));return[i].concat(c).concat([s]).join("\n")}return[i].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},d=[],a=0;a<e.length;a++){var l=e[a],s=o.base?l[0]+o.base:l[0],c=i[s]||0,u="".concat(s," ").concat(c);i[s]=c+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(t[p].references++,t[p].updater(m)):t.push({identifier:u,updater:r(m,o),references:1}),d.push(u)}return d}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<i.length;d++){var a=n(i[d]);t[a].references--}for(var l=o(e,r),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),d=n.n(i),a=n(565),l=n.n(a),s=n(216),c=n.n(s),u=n(589),p=n.n(u),m=n(426),A={};A.styleTagTransform=p(),A.setAttributes=l(),A.insert=d().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=c(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;const b=()=>{const e=document.querySelector("div#sidebar"),t=document.createElement("button");t.setAttribute("id","add-project-button"),t.textContent="Add Project",e.appendChild(t)},f=()=>{const e=document.querySelector("div#content"),t=document.createElement("button");t.setAttribute("id","add-to-do-button"),t.textContent="Add To-Do",e.appendChild(t)},h=()=>{const e=document.createElement("div"),t=document.querySelector("div#sidebar");e.setAttribute("id","project-list"),e.textContent="Projects",t.appendChild(e)},C=e=>{const t=document.createElement("a"),n=document.querySelector("div#project-list");return t.classList.add("project"),t.setAttribute("href","#"),t.textContent=e,n.appendChild(t),t},y=()=>{const e=document.createElement("div"),t=document.createElement("form"),n=document.querySelector("div#sidebar"),o=document.createElement("label"),r=document.createElement("input"),i=document.createElement("button"),d=document.createElement("button");e.classList.add("modal"),t.setAttribute("id","add-project-form"),t.setAttribute("onsubmit","return false"),o.classList.add("form-element"),o.setAttribute("for","title"),o.textContent="Project Name",r.classList.add("form-element"),r.setAttribute("type","text"),r.setAttribute("name","title"),r.required=!0,i.classList.add("form-element"),i.setAttribute("type","submit"),i.setAttribute("id","submit-project"),i.textContent="Add Project",d.classList.add("form-element"),d.setAttribute("type","button"),d.setAttribute("id","close-project-form"),d.textContent="Cancel",t.appendChild(o),t.appendChild(r),t.appendChild(i),t.appendChild(d),e.appendChild(t),n.appendChild(e)},E=e=>{const t=document.querySelector("div#content");console.log(t),console.log(e),t.removeChild(e)},g=e=>{const t=document.querySelector("div#sidebar");console.log(e),t.removeChild(e)},v=()=>{const e=document.createElement("div"),t=document.createElement("form"),n=document.querySelector("div#content"),o=document.createElement("label"),r=document.createElement("input"),i=document.createElement("label"),d=document.createElement("input"),a=document.createElement("label"),l=document.createElement("input"),s=document.createElement("label"),c=document.createElement("input"),u=document.createElement("label"),p=document.createElement("input"),m=document.createElement("label"),A=document.createElement("input"),b=document.createElement("label"),f=document.createElement("input"),h=document.createElement("label"),C=document.createElement("input"),y=document.createElement("button"),E=document.createElement("button");e.classList.add("modal"),t.setAttribute("id","add-to-do-form"),t.setAttribute("onsubmit","return false"),o.classList.add("form-element"),o.setAttribute("for","title"),o.textContent="Title",r.classList.add("form-element"),r.setAttribute("type","text"),r.setAttribute("name","title"),r.required=!0,i.classList.add("form-element"),i.setAttribute("for","description"),i.textContent="Description",d.classList.add("form-element"),d.setAttribute("type","text"),d.setAttribute("name","description"),a.classList.add("form-element"),a.setAttribute("for","due-date"),a.textContent="Due Date",l.classList.add("form-element"),l.setAttribute("type","date"),l.setAttribute("name","due-date"),s.classList.add("form-element"),s.setAttribute("for","priority"),s.textContent="No Priority",c.classList.add("form-element"),c.setAttribute("type","radio"),c.setAttribute("name","priority"),c.setAttribute("value",""),u.classList.add("form-element"),u.setAttribute("for","priority"),u.textContent="Low Priority",p.classList.add("form-element"),p.setAttribute("type","radio"),p.setAttribute("name","priority"),p.setAttribute("value","low-priority"),m.classList.add("form-element"),m.setAttribute("for","priority"),m.textContent="Medium Priority",A.classList.add("form-element"),A.setAttribute("type","radio"),A.setAttribute("name","priority"),A.setAttribute("value","medium-priority"),b.classList.add("form-element"),b.setAttribute("for","priority"),b.textContent="High Priority",f.classList.add("form-element"),f.setAttribute("type","radio"),f.setAttribute("name","priority"),f.setAttribute("value","high-priority"),h.classList.add("form-element"),h.setAttribute("for","notes"),h.textContent="Notes",C.classList.add("form-element"),C.setAttribute("type","text"),C.setAttribute("name","notes"),y.classList.add("form-element"),y.setAttribute("type","submit"),y.setAttribute("id","submit-to-do"),y.textContent="Add To-Do",E.classList.add("form-element"),E.setAttribute("type","button"),E.setAttribute("id","close-to-do-form"),E.textContent="Cancel",t.appendChild(o),t.appendChild(r),t.appendChild(i),t.appendChild(d),t.appendChild(a),t.appendChild(l),t.appendChild(s),t.appendChild(c),t.appendChild(u),t.appendChild(p),t.appendChild(m),t.appendChild(A),t.appendChild(b),t.appendChild(f),t.appendChild(h),t.appendChild(C),t.appendChild(y),t.appendChild(E),e.appendChild(t),n.appendChild(e)},x=e=>{void 0!==e[0]&&console.log(e[0].getTitle());const t=document.createElement("div"),n=document.querySelector("div#content");t.classList.add("to-do-list"),t.textContent="To-Dos";const o=[];return n.appendChild(t),e.forEach((e=>{const t=e.getTitle(),n=(e.getDescription(),e.getDueDate()),r=(e.getPriority(),e.getNotes(),((e,t)=>{const n=document.querySelector("div.to-do-list"),o=document.createElement("span"),r=document.createElement("p"),i=document.createElement("p"),d=document.createElement("label"),a=document.createElement("input");return d.classList.add("to-do-checkbox"),d.setAttribute("for","checkbox"),a.classList.add("to-do-checkbox"),a.setAttribute("type","checkbox"),a.setAttribute("name","checkbox"),o.classList.add("to-do"),r.textContent=e,r.classList.add("to-do-title"),i.classList.add("due-date"),""!==t&&(i.textContent="Due: "+t),o.appendChild(d),o.appendChild(a),o.appendChild(r),o.appendChild(i),n.appendChild(o),o})(t,n));o.push(r)})),o},L=()=>{const e=document.querySelector("div#content");for(;e.firstChild;)e.removeChild(e.firstChild)},B=e=>{const t=document.querySelector("div#content"),n=document.createElement("div");n.setAttribute("id","edit-to-do-modal"),n.classList.add("modal");const o=document.createElement("form");o.classList.add("form"),o.setAttribute("id","edit-to-do-form"),o.setAttribute("onsubmit","return false"),console.log(e);const r=e.getTitle(),i=e.getDescription(),d=e.getDueDate(),a=e.getPriority(),l=e.getNotes(),s=document.createElement("label"),c=document.createElement("input"),u=document.createElement("label"),p=document.createElement("input"),m=document.createElement("label"),A=document.createElement("input"),b=document.createElement("label"),f=document.createElement("input"),h=document.createElement("label"),C=document.createElement("input"),y=document.createElement("label"),E=document.createElement("input"),g=document.createElement("label"),v=document.createElement("input"),x=document.createElement("label"),L=document.createElement("input"),B=document.createElement("button"),S=document.createElement("button");switch(s.classList.add("form-element"),s.setAttribute("for","title"),s.textContent="Title",c.classList.add("form-element"),c.setAttribute("type","text"),c.setAttribute("name","title"),c.setAttribute("value",r),u.classList.add("form-element"),u.setAttribute("for","description"),u.textContent="Description",p.classList.add("form-element"),p.setAttribute("type","text"),p.setAttribute("name","description"),p.setAttribute("value",i),m.classList.add("form-element"),m.setAttribute("for","due-date"),m.textContent="Due Date",A.classList.add("form-element"),A.setAttribute("type","date"),A.setAttribute("name","due-date"),A.setAttribute("value",d),b.classList.add("form-element"),b.setAttribute("for","priority"),b.textContent="No Priority",f.classList.add("form-element"),f.setAttribute("type","radio"),f.setAttribute("name","priority"),f.setAttribute("value",""),h.classList.add("form-element"),h.setAttribute("for","priority"),h.textContent="Low Priority",C.classList.add("form-element"),C.setAttribute("type","radio"),C.setAttribute("name","priority"),C.setAttribute("value","low-priority"),y.classList.add("form-element"),y.setAttribute("for","priority"),y.textContent="Medium Priority",E.classList.add("form-element"),E.setAttribute("type","radio"),E.setAttribute("name","priority"),E.setAttribute("value","medium-priority"),g.classList.add("form-element"),g.setAttribute("for","priority"),g.textContent="High Priority",v.classList.add("form-element"),v.setAttribute("type","radio"),v.setAttribute("name","priority"),v.setAttribute("value","high-priority"),a){case"":f.checked=!0;break;case"low-priority":C.checked=!0;break;case"medium-priority":E.checked=!0;break;case"high-priority":v.checked=!0}x.classList.add("form-element"),x.setAttribute("for","notes"),x.textContent="Notes",L.classList.add("form-element"),L.setAttribute("type","text"),L.setAttribute("name","notes"),L.setAttribute("value",l),B.classList.add("form-element"),B.setAttribute("type","submit"),B.setAttribute("id","edit-to-do"),B.textContent="Edit To-Do",S.classList.add("form-element"),S.setAttribute("type","button"),S.setAttribute("id","close-edit-to-do"),S.textContent="Cancel",o.appendChild(s),o.appendChild(c),o.appendChild(u),o.appendChild(p),o.appendChild(m),o.appendChild(A),o.appendChild(b),o.appendChild(f),o.appendChild(h),o.appendChild(C),o.appendChild(y),o.appendChild(E),o.appendChild(g),o.appendChild(v),o.appendChild(x),o.appendChild(L),o.appendChild(B),o.appendChild(S),n.appendChild(o),t.appendChild(n)},S=e=>{document.querySelector("div.to-do-list").removeChild(e)},k=(()=>{let e=[];return{addProject:t=>{e.push(t)},getProjectList:()=>e,set projectList(t){e=t}}})(),I=(e,t)=>{t.getToDoList().push(e)},w=(e,t,n,o,r,i)=>{e.title=t,e.description=n,e.dueDate=o,e.priority=r,e.newNotes=i},D=()=>{const e=k.getProjectList();localStorage.setItem("Projects",JSON.stringify(e)),console.log(e),console.log(JSON.stringify(e)),console.log(JSON.parse(localStorage.getItem("Projects")))},q=()=>{let e=[];e=JSON.parse(localStorage.getItem("Projects")),k.projectList=e},j=(()=>{const e=new Map,t=new Map,n=e=>{const t=(e=>{let t=[];return{getTitle:()=>e,getToDoList:()=>t}})(e);k.addProject(t);const n=C(e);a(n,t),d()},o=e=>{const t=e.getToDoList();L(),f();const n=x(t);void 0!==t[0]&&console.log(t[0].getTitle()),l(n,t),(e=>{document.querySelector("button#add-to-do-button").addEventListener("click",(()=>{null===document.querySelector("form")&&(v(),document.querySelector("div.modal").style.display="block",(e=>{const t=document.querySelector("div#content>div.modal"),n=document.querySelector("form#add-to-do-form"),r=document.querySelector("button#close-to-do-form");n.addEventListener("submit",(()=>{const r=(i=n.elements.title.value,d=n.elements.description.value,a=n.elements["due-date"].value,l=n.elements.priority.value,s=n.elements.notes.value,{getTitle:()=>i,getDescription:()=>d,getDueDate:()=>a,getPriority:()=>l,getNotes:()=>s,set title(e){i=e},set description(e){d=e},set dueDate(e){a=e},set priority(e){l=e},set priority(e){s=e}});var i,d,a,l,s;console.log(t),I(r,e),E(t),o(e)})),r.addEventListener("click",(()=>{E(t)}))})(e))}))})(e),i(e),r(e)},r=e=>{document.querySelectorAll("span.to-do").forEach(((n,o)=>{n.addEventListener("click",(function(n){if("checkbox"!==n.target.getAttribute("type")){const r=t.get(n.currentTarget);console.log(n),null===document.querySelector("div#edit-to-do-modal")&&(B(r),document.querySelector("div#edit-to-do-modal").style.display="block",s(r,o,e),console.log("hello"))}}))}))},i=e=>{document.querySelectorAll("div.to-do-list>span.to-do>input.to-do-checkbox").forEach(((t,n)=>{c(t,n,e)}))},d=()=>{document.querySelectorAll("a.project").forEach((t=>{t.addEventListener("click",(function(t){const n=e.get(t.target);console.log(t.target),o(n)}))}))},a=(t,n)=>{e.set(t,n)},l=(e,n)=>{t.clear(),console.log(e),console.log(t),e.forEach(((e,o)=>{const r=n[o];t.set(e,r)}))},s=(e,t,n)=>{const r=document.querySelector("div#edit-to-do-modal"),i=document.querySelector("form#edit-to-do-form"),d=document.querySelector("form#edit-to-do-form>button#close-edit-to-do");i.addEventListener("submit",(()=>{const d=i.elements.title.value,a=i.elements.description.value,l=i.elements["due-date"].value,s=i.elements.priority.value,c=i.elements.notes.value;console.log(d),w(e,d,a,l,s,c),toDoList=n.getToDoList(),console.log(toDoList[t].getTitle()),toDoList[t]=e,E(r),o(n)})),d.addEventListener("click",(()=>{E(r)}))},c=(e,t,n)=>{e.addEventListener("change",(e=>{e.preventDefault(),e.stopPropagation();const o=e.currentTarget.parentElement;console.log(e),n.getToDoList().splice(t,1),S(o)}))};return{observeProjectButton:()=>{document.querySelector("button#add-project-button").addEventListener("click",(()=>{null===document.querySelector("form")&&(y(),document.querySelector("div.modal").style.display="block",(()=>{const e=document.querySelector("div#sidebar>div.modal");console.log(e);const t=document.querySelector("form#add-project-form"),o=document.querySelector("button#close-project-form");t.addEventListener("submit",(()=>{const o=t.elements.title.value;n(o),g(e),D()})),o.addEventListener("click",(()=>{g(e)}))})())}))},createProject:n}})(),P=()=>{b(),h(),j.observeProjectButton()},T=()=>{j.createProject("Default Project")};q(),P(),T()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,